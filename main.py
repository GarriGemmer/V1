import os
import logging
import requests
from flask import Flask, request
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
MODEL = "mistralai/devstarl-small:free"
PORT = int(os.environ.get("PORT", 8080))

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

USER_STATE = {}
QUESTIONS = [
    "–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã –ø—Ä–æ—Å–Ω—É–ª—Å—è –º–∏–ª–ª–∏–æ–Ω–µ—Ä–æ–º. –ß–µ–º –∑–∞–π–º—ë—à—å—Å—è –ø–µ—Ä–≤—ã–º –¥–µ–ª–æ–º?",
    "–ß—Ç–æ –±—ã —Ç—ã —Å–¥–µ–ª–∞–ª, –µ—Å–ª–∏ –±—ã —Ç–µ–±–µ –Ω–µ –Ω—É–∂–Ω–æ –±—ã–ª–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Ä–∞–¥–∏ –¥–µ–Ω–µ–≥?",
    "–ö–∞–∫–∏–µ —Å—Ç—Ä–∞—Ö–∏ —Ç–µ–±–µ –º–µ—à–∞—é—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å?"
]

def generate_prediction(prompt: str) -> str:
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }
    payload = {
        "model": MODEL,
        "messages": [{"role": "user", "content": prompt}]
    }
    try:
        response = requests.post("https://openrouter.ai/api/v1/chat/completions", json=payload, headers=headers)
        response.raise_for_status()
        return response.json()['choices'][0]['message']['content']
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    USER_STATE[update.effective_user.id] = {"step": 0, "answers": []}
    keyboard = [[InlineKeyboardButton("–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart")]]
    await update.message.reply_text(QUESTIONS[0], reply_markup=InlineKeyboardMarkup(keyboard))

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "restart":
        USER_STATE[query.from_user.id] = {"step": 0, "answers": []}
        keyboard = [[InlineKeyboardButton("–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart")]]
        await query.message.reply_text(QUESTIONS[0], reply_markup=InlineKeyboardMarkup(keyboard))

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in USER_STATE:
        await update.message.reply_text("–ù–∞–∂–º–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç.")
        return

    state = USER_STATE[user_id]
    state["answers"].append(update.message.text)
    state["step"] += 1

    if state["step"] < len(QUESTIONS):
        keyboard = [[InlineKeyboardButton("–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart")]]
        await update.message.reply_text(QUESTIONS[state["step"]], reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        prompt = "\n".join([f"Q{i+1}: {q}\nA{i+1}: {a}" for i, (q, a) in enumerate(zip(QUESTIONS, state['answers']))])
        await update.message.reply_text("–°–µ–∫—É–Ω–¥—É... –Ø –¥—É–º–∞—é...")
        response = generate_prediction(prompt)
        await update.message.reply_text(f"üß† –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ:\n{response}")
        keyboard = [[InlineKeyboardButton("–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart")]]
        await update.message.reply_text("–•–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑?", reply_markup=InlineKeyboardMarkup(keyboard))

app = Flask(__name__)
@app.route("/")
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

if __name__ == '__main__':
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    import threading
    threading.Thread(target=lambda: app.run(host="0.0.0.0", port=PORT)).start()
    application.run_polling()
